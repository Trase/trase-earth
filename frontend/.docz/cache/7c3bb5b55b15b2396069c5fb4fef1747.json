{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",\"@babel/plugin-transform-runtime\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js","mtime":1553790719499},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1553790719443},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1550511965648},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":1547926395833}],"contextDependencies":[],"result":["(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { createSelector } from 'reselect';\nimport { getDynamicSentence } from 'react-components/dashboard-element/dashboard-element.selectors';\n\nvar getData = function getData(state, props) {\n  return props.data || null;\n};\n\nvar getConfig = function getConfig(state, props) {\n  return props.config || null;\n};\n\nvar getSelectedYears = function getSelectedYears(state) {\n  return state.dashboardElement.selectedYears;\n};\n\nexport var makeAddIndicatorsPartToSentence = function makeAddIndicatorsPartToSentence() {\n  return createSelector([getData, getConfig, getSelectedYears, getDynamicSentence], function (data, config, selectedYears, dynamicSentenceParts) {\n    if (!data || !config || !dynamicSentenceParts) return null;\n    var yAxisLabel = config.yAxisLabel;\n    var commoditiesPart = dynamicSentenceParts.find(function (p) {\n      return p.id === 'commodities';\n    });\n    var updatedCommoditiesPart = commoditiesPart;\n\n    if (commoditiesPart) {\n      updatedCommoditiesPart = _objectSpread({}, commoditiesPart, {\n        prefix: 'of'\n      });\n    }\n\n    var indicatorNamePart = {\n      id: 'indicator-name',\n      prefix: '',\n      value: [{\n        name: yAxisLabel.text\n      }],\n      transform: 'capitalize'\n    };\n    var indicatorValuePart = {\n      id: 'indicator-value',\n      prefix: 'was',\n      value: [{\n        name: \"\".concat(data[0].y0 || 0, \" \").concat(yAxisLabel.suffix)\n      }]\n    };\n    var yearPart = selectedYears ? {\n      id: 'year',\n      prefix: 'for',\n      value: [{\n        name: selectedYears[0] !== selectedYears[1] ? \"\".concat(selectedYears[0], \" - \").concat(selectedYears[1]) : \"\".concat(selectedYears[0])\n      }]\n    } : {};\n    return [indicatorNamePart, updatedCommoditiesPart].concat(_toConsumableArray(dynamicSentenceParts.filter(function (p) {\n      return p.id !== 'commodities';\n    })), [indicatorValuePart, yearPart]);\n  });\n};\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_toConsumableArray, \"_toConsumableArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(_nonIterableSpread, \"_nonIterableSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(_iterableToArray, \"_iterableToArray\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(_arrayWithoutHoles, \"_arrayWithoutHoles\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(_objectSpread, \"_objectSpread\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(_defineProperty, \"_defineProperty\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(getData, \"getData\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(getConfig, \"getConfig\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(getSelectedYears, \"getSelectedYears\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n  reactHotLoader.register(makeAddIndicatorsPartToSentence, \"makeAddIndicatorsPartToSentence\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/react-components/dashboard-element/dashboard-widget/dynamic-sentence-widget/dynamic-sentence-widget.selectors.js"],"names":["getData","props","getConfig","getSelectedYears","state","makeAddIndicatorsPartToSentence","createSelector","yAxisLabel","config","commoditiesPart","p","updatedCommoditiesPart","prefix","indicatorNamePart","id","value","name","text","transform","indicatorValuePart","data","yearPart","selectedYears"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAA,cAAA,QAAA,UAAA;AACA,SAAA,kBAAA,QAAA,gEAAA;;AAEA,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAAA,KAAA,EAAA,KAAA,EAAA;AAAA,SAAkBC,KAAK,CAALA,IAAAA,IAAlB,IAAA;AAAhB,CAAA;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAA,KAAA,EAAA,KAAA,EAAA;AAAA,SAAkBD,KAAK,CAALA,MAAAA,IAAlB,IAAA;AAAlB,CAAA;;AACA,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,KAAA,EAAK;AAAA,SAAIC,KAAK,CAALA,gBAAAA,CAAJ,aAAA;AAA9B,CAAA;;AAEA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,GAAA;AAAA,SAC7CC,cAAc,CACZ,CAAA,OAAA,EAAA,SAAA,EAAA,gBAAA,EADY,kBACZ,CADY,EAEZ,UAAA,IAAA,EAAA,MAAA,EAAA,aAAA,EAAA,oBAAA,EAAuD;AACrD,QAAI,CAAA,IAAA,IAAS,CAAT,MAAA,IAAoB,CAAxB,oBAAA,EAA+C,OAAA,IAAA;AADM,QAE7CC,UAF6C,GAE9BC,MAF8B,CAAA,UAAA;AAGrD,QAAMC,eAAe,GAAG,oBAAoB,CAApB,IAAA,CAA0B,UAAA,CAAA,EAAC;AAAA,aAAIC,CAAC,CAADA,EAAAA,KAAJ,aAAA;AAAnD,KAAwB,CAAxB;AACA,QAAIC,sBAAsB,GAA1B,eAAA;;AACA,QAAA,eAAA,EAAqB;AACnBA,MAAAA,sBAAsB,GAAA,aAAA,CAAA,EAAA,EAAA,eAAA,EAAA;AAAyBC,QAAAA,MAAM,EAAE;AAAjC,OAAA,CAAtBD;AACD;;AAED,QAAME,iBAAiB,GAAG;AACxBC,MAAAA,EAAE,EADsB,gBAAA;AAExBF,MAAAA,MAAM,EAFkB,EAAA;AAGxBG,MAAAA,KAAK,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAET,UAAU,CAACU;AAAnB,OAAD,CAHiB;AAIxBC,MAAAA,SAAS,EAAE;AAJa,KAA1B;AAOA,QAAMC,kBAAkB,GAAG;AACzBL,MAAAA,EAAE,EADuB,iBAAA;AAEzBF,MAAAA,MAAM,EAFmB,KAAA;AAGzBG,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,IAAI,EAAA,GAAA,MAAA,CAAKI,IAAI,CAAJA,CAAI,CAAJA,CAAAA,EAAAA,IAAL,CAAA,EAAA,GAAA,EAAA,MAAA,CAAwBb,UAAU,CAAlC,MAAA;AADN,OADK;AAHkB,KAA3B;AAUA,QAAMc,QAAQ,GAAGC,aAAa,GAC1B;AACER,MAAAA,EAAE,EADJ,MAAA;AAEEF,MAAAA,MAAM,EAFR,KAAA;AAGEG,MAAAA,KAAK,EAAE,CACL;AACEC,QAAAA,IAAI,EACFM,aAAa,CAAbA,CAAa,CAAbA,KAAqBA,aAAa,CAAlCA,CAAkC,CAAlCA,GAAAA,GAAAA,MAAAA,CACOA,aAAa,CADpBA,CACoB,CADpBA,EAAAA,KAAAA,EAAAA,MAAAA,CAC6BA,aAAa,CAD1CA,CAC0C,CAD1CA,CAAAA,GAAAA,GAAAA,MAAAA,CAEOA,aAAa,CAFpBA,CAEoB,CAFpBA;AAFJ,OADK;AAHT,KAD0B,GAA9B,EAAA;AAeA,WAAA,CAAA,iBAAA,EAAA,sBAAA,EAAA,MAAA,CAAA,kBAAA,CAGK,oBAAoB,CAApB,MAAA,CAA4B,UAAA,CAAA,EAAC;AAAA,aAAIZ,CAAC,CAADA,EAAAA,KAAJ,aAAA;AAHlC,KAGK,CAHL,CAAA,EAAA,CAAA,kBAAA,EAAA,QAAA,CAAA,CAAA;AA5CyC,GAC/B,CAD+B;AAAxC,CAAA;;;;;;;;;;;;;;;;0BAJDV,O;0BACAE,S;0BACAC,gB;0BAEOE,+B","sourcesContent":["import { createSelector } from 'reselect';\nimport { getDynamicSentence } from 'react-components/dashboard-element/dashboard-element.selectors';\n\nconst getData = (state, props) => props.data || null;\nconst getConfig = (state, props) => props.config || null;\nconst getSelectedYears = state => state.dashboardElement.selectedYears;\n\nexport const makeAddIndicatorsPartToSentence = () =>\n  createSelector(\n    [getData, getConfig, getSelectedYears, getDynamicSentence],\n    (data, config, selectedYears, dynamicSentenceParts) => {\n      if (!data || !config || !dynamicSentenceParts) return null;\n      const { yAxisLabel } = config;\n      const commoditiesPart = dynamicSentenceParts.find(p => p.id === 'commodities');\n      let updatedCommoditiesPart = commoditiesPart;\n      if (commoditiesPart) {\n        updatedCommoditiesPart = { ...commoditiesPart, prefix: 'of' };\n      }\n\n      const indicatorNamePart = {\n        id: 'indicator-name',\n        prefix: '',\n        value: [{ name: yAxisLabel.text }],\n        transform: 'capitalize'\n      };\n\n      const indicatorValuePart = {\n        id: 'indicator-value',\n        prefix: 'was',\n        value: [\n          {\n            name: `${data[0].y0 || 0} ${yAxisLabel.suffix}`\n          }\n        ]\n      };\n\n      const yearPart = selectedYears\n        ? {\n            id: 'year',\n            prefix: 'for',\n            value: [\n              {\n                name:\n                  selectedYears[0] !== selectedYears[1]\n                    ? `${selectedYears[0]} - ${selectedYears[1]}`\n                    : `${selectedYears[0]}`\n              }\n            ]\n          }\n        : {};\n\n      return [\n        indicatorNamePart,\n        updatedCommoditiesPart,\n        ...dynamicSentenceParts.filter(p => p.id !== 'commodities'),\n        indicatorValuePart,\n        yearPart\n      ];\n    }\n  );\n"]}]}