{"remainingRequest":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\",[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":true,\"typescript\":false,\"parseProps\":true}]],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],[\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/react-hot-loader/babel.js\"],\"env\":{\"production\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"transform-react-remove-prop-types\",\"lodash\"]},\"test\":{\"presets\":[[\"@babel/env\",{\"useBuiltIns\":\"entry\"}],\"@babel/preset-react\"],\"plugins\":[\"@babel/plugin-syntax-dynamic-import\",\"@babel/plugin-syntax-object-rest-spread\",\"@babel/plugin-transform-exponentiation-operator\",[\"@babel/plugin-proposal-class-properties\",{\"spec\":true}],\"@babel/plugin-transform-modules-commonjs\",\"@babel/plugin-transform-runtime\",[\"module-resolver\",{\"alias\":{\"scripts\":\"./scripts\",\"actions\":\"./scripts/actions\",\"utils\":\"./scripts/utils\",\"reducers\":\"./scripts/reducers\",\"store\":\"./scripts/store\",\"components\":\"./scripts/components\",\"containers\":\"./scripts/containers\",\"constants\":\"./scripts/constants\",\"router\":\"./scripts/router\",\"react-components\":\"./scripts/react-components\",\"named-maps\":\"./scripts/named-maps\"}}]]}},\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/wrapSVGText.js","dependencies":[{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/wrapSVGText.js","mtime":1552377358554},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/.babelrc","mtime":1553790719443},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1550511965648},{"path":"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/node_modules/babel-loader/lib/index.js","mtime":1547926395833}],"contextDependencies":[],"result":["(function () {\n  var enterModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).enterModule;\n  enterModule && enterModule(module);\n})();\n\nvar _default = function _default(name, height, _labelCharHeight, _labelCharsPerLine, _labelMaxLines) {\n  if (height < _labelCharHeight - 6) {\n    return '';\n  }\n\n  var maxLinesForNode = Math.max(1, Math.min(_labelMaxLines, Math.floor(height / _labelCharHeight)));\n  var words = name.split(' ');\n  var lines = [];\n  var currentLine = '';\n\n  for (var i = 0; i < words.length; i++) {\n    var word = words[i];\n    var line = word;\n\n    if (currentLine.trim() !== '') {\n      line = \"\".concat(currentLine, \" \").concat(line);\n    } // line is too long\n\n\n    if (line.length > _labelCharsPerLine) {\n      // last allowed line: show max length possible with ellipsis\n      if (lines.length === maxLinesForNode - 1) {\n        currentLine = \"\".concat(line.substr(0, _labelCharsPerLine - 1), \"\\u2026\");\n        break;\n      } else if (word.length > _labelCharsPerLine) {\n        // word longer than allowed line length: split word in two with a dash\n        var wordStart = line.substr(0, _labelCharsPerLine - 1);\n        currentLine = line.substr(_labelCharsPerLine - 1);\n        lines.push(\"\".concat(wordStart, \"-\"));\n      } else {\n        lines.push(currentLine);\n        currentLine = word;\n      }\n    } else {\n      currentLine = line;\n    }\n  }\n\n  lines.push(currentLine);\n  return lines;\n};\n\n// formats/create ellipsis nodes text using # of lines available, node width, etc\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).default;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/wrapSVGText.js\");\n})();\n\n;\n\n(function () {\n  var leaveModule = (typeof reactHotLoaderGlobal !== 'undefined' ? reactHotLoaderGlobal : require('react-hot-loader')).leaveModule;\n  leaveModule && leaveModule(module);\n})();",{"version":3,"sources":["/Users/rodrigo/WorkWorkWorkWorkWork/trase/frontend/scripts/utils/wrapSVGText.js"],"names":["height","_labelCharHeight","maxLinesForNode","Math","words","name","lines","currentLine","i","word","line","_labelCharsPerLine","wordStart"],"mappings":";;;;;eACe,kBAAA,IAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,kBAAA,EAAA,cAAA,EAAwE;AACrF,MAAIA,MAAM,GAAGC,gBAAgB,GAA7B,CAAA,EAAmC;AACjC,WAAA,EAAA;AACD;;AACD,MAAMC,eAAe,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAEtBA,IAAI,CAAJA,GAAAA,CAAAA,cAAAA,EAAyBA,IAAI,CAAJA,KAAAA,CAAWH,MAAM,GAF5C,gBAE2BG,CAAzBA,CAFsBA,CAAxB;AAIA,MAAMC,KAAK,GAAGC,IAAI,CAAJA,KAAAA,CAAd,GAAcA,CAAd;AACA,MAAMC,KAAK,GAAX,EAAA;AACA,MAAIC,WAAW,GAAf,EAAA;;AAEA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGJ,KAAK,CAAzB,MAAA,EAAkCI,CAAlC,EAAA,EAAuC;AACrC,QAAMC,IAAI,GAAGL,KAAK,CAAlB,CAAkB,CAAlB;AACA,QAAIM,IAAI,GAAR,IAAA;;AACA,QAAIH,WAAW,CAAXA,IAAAA,OAAJ,EAAA,EAA+B;AAC7BG,MAAAA,IAAI,GAAA,GAAA,MAAA,CAAA,WAAA,EAAA,GAAA,EAAA,MAAA,CAAJA,IAAI,CAAJA;AAJmC,KAAA,CAMrC;;;AACA,QAAIA,IAAI,CAAJA,MAAAA,GAAJ,kBAAA,EAAsC;AACpC;AACA,UAAIJ,KAAK,CAALA,MAAAA,KAAiBJ,eAAe,GAApC,CAAA,EAA0C;AACxCK,QAAAA,WAAW,GAAA,GAAA,MAAA,CAAMG,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAeC,kBAAkB,GAAvC,CAAMD,CAAN,EAAXH,QAAW,CAAXA;AACA;AAFF,OAAA,MAGO,IAAIE,IAAI,CAAJA,MAAAA,GAAJ,kBAAA,EAAsC;AAC3C;AACA,YAAMG,SAAS,GAAGF,IAAI,CAAJA,MAAAA,CAAAA,CAAAA,EAAeC,kBAAkB,GAAnD,CAAkBD,CAAlB;AACAH,QAAAA,WAAW,GAAGG,IAAI,CAAJA,MAAAA,CAAYC,kBAAkB,GAA5CJ,CAAcG,CAAdH;AACAD,QAAAA,KAAK,CAALA,IAAAA,CAAAA,GAAAA,MAAAA,CAAAA,SAAAA,EAAAA,GAAAA,CAAAA;AAJK,OAAA,MAKA;AACLA,QAAAA,KAAK,CAALA,IAAAA,CAAAA,WAAAA;AACAC,QAAAA,WAAW,GAAXA,IAAAA;AACD;AAbH,KAAA,MAcO;AACLA,MAAAA,WAAW,GAAXA,IAAAA;AACD;AACF;;AAEDD,EAAAA,KAAK,CAALA,IAAAA,CAAAA,WAAAA;AAEA,SAAA,KAAA;AAxCF,C;;AADA;AACA","sourcesContent":["// formats/create ellipsis nodes text using # of lines available, node width, etc\nexport default (name, height, _labelCharHeight, _labelCharsPerLine, _labelMaxLines) => {\n  if (height < _labelCharHeight - 6) {\n    return '';\n  }\n  const maxLinesForNode = Math.max(\n    1,\n    Math.min(_labelMaxLines, Math.floor(height / _labelCharHeight))\n  );\n  const words = name.split(' ');\n  const lines = [];\n  let currentLine = '';\n\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let line = word;\n    if (currentLine.trim() !== '') {\n      line = `${currentLine} ${line}`;\n    }\n    // line is too long\n    if (line.length > _labelCharsPerLine) {\n      // last allowed line: show max length possible with ellipsis\n      if (lines.length === maxLinesForNode - 1) {\n        currentLine = `${line.substr(0, _labelCharsPerLine - 1)}â€¦`;\n        break;\n      } else if (word.length > _labelCharsPerLine) {\n        // word longer than allowed line length: split word in two with a dash\n        const wordStart = line.substr(0, _labelCharsPerLine - 1);\n        currentLine = line.substr(_labelCharsPerLine - 1);\n        lines.push(`${wordStart}-`);\n      } else {\n        lines.push(currentLine);\n        currentLine = word;\n      }\n    } else {\n      currentLine = line;\n    }\n  }\n\n  lines.push(currentLine);\n\n  return lines;\n};\n"]}]}